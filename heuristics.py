import os
import re
import json
import hashlib
import bencode


def checkReqFingerprints(log, report):
    with open('./fingerprints/fingerprints.json') as fp:
        fingerprints = json.load(fp)

    for el in log:
        alerts = []
        nAlone = 0
        nOther = 0
        for fp in fingerprints:
            if re.match(fp['fp'], el['ServerPath']):
                if fp['alone'] or (not(fp['alone']) and len(alerts) > 0):
                    alerts.append(fp['attack'])
                if fp['alone']:
                    nAlone += 1
                else:
                    nOther +=1
        if len(alerts) > 0 :
            k = hashlib.md5(bencode.bencode(el)).hexdigest() #compute the MD5 of the connection
            if k in report:
                report[k]["alerts"] += len(alerts)
                report[k]["aloneAlerts"] += nAlone
                report[k]["otherAlerts"] += nOther
            else:
                report[k] = {
                    "connection": el,
                    "alerts" : len(alerts),
                    "aloneAlerts" : nAlone,
                    "otherAlerts" : nOther
                }
            print( el['ServerPath'])
            print( "the connection scored "+ str(len(alerts)) + " misbehaviors:")
            print( alerts)
    return report

def checkRefAndUserAgentFingerprints(log, report):
    with open('./fingerprints/referrer-UserAgentFP.json') as fp:
        fingerprints = json.load(fp)

    for el in log:
        alerts = []
        nAlone = 0
        nOther = 0

        for fp in fingerprints:
            if re.match(fp['fp'], el['Referrer']) or re.match(fp['fp'], el['UserAgent']) :
                if fp['alone'] or (not (fp['alone']) and len(alerts) > 0):
                    alerts.append(fp['attack'])
                if fp['alone']:
                    nAlone += 1
                else:
                    nOther +=1

        if len(alerts) > 0:
            k = hashlib.md5(bencode.bencode(
                el)).hexdigest()  #compute the MD5 of the connection
            if k in report:
                report[k]["alerts"] += len(alerts)
                report[k]["aloneAlerts"] += nAlone
                report[k]["otherAlerts"] += nOther
            else:
                report[k] = {
                    "connection": el,
                    "alerts": len(alerts),
                    "aloneAlerts": nAlone,
                    "otherAlerts": nOther
                }
            print( "Referrer: " ,el['Referrer'])
            print( "UserAgent: " ,el['UserAgent'])
            print( "the connection scored " + str(
                len(alerts)) + " misbehaviors:")
            print( alerts)
    return report

def checkStatusCode(log, report):
    for el in log:
        count = 0
        if el["StatusCode"] == "500":
            count += 1
            print( el)
            print( "Sometimes server error is generated by attacker attempt to avoid security checks whith special character coding")
        if el["StatusCode"] == "403":
            count +=1
            print( el)
            print( "Denied error, it is possible that an attacker is tryng to access forbidden files")
        if count > 0:
            k = hashlib.md5(bencode.bencode(
                el)).hexdigest()  #compute the MD5 of the connection
            if k in report:
                report[k]["alerts"] += count
                report[k]["aloneAlerts"] += count
            else:
                report[k] = {"connection": el, "alerts": count, "aloneAlerts": count, "otherAlerts" : 0}
    return report